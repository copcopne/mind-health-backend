package com.si.mindhealth.services.impl;

import java.security.Principal;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.si.mindhealth.dtos.request.FeedbackRequestDTO;
import com.si.mindhealth.dtos.request.MessageRequestDTO;
import com.si.mindhealth.dtos.response.FeedbackResponseDTO;
import com.si.mindhealth.dtos.response.MessageResponseDTO;
import com.si.mindhealth.dtos.response.PageResponseDTO;
import com.si.mindhealth.entities.Message;
import com.si.mindhealth.entities.MoodEntry;
import com.si.mindhealth.entities.User;
import com.si.mindhealth.entities.enums.Sender;
import com.si.mindhealth.entities.enums.TargetType;
import com.si.mindhealth.exceptions.ForbiddenException;
import com.si.mindhealth.repositories.MessageRepository;
import com.si.mindhealth.services.FeedbackService;
import com.si.mindhealth.services.GeminiService;
import com.si.mindhealth.services.MessageService;
import com.si.mindhealth.services.MoodEntryService;
import com.si.mindhealth.services.UserService;
import com.si.mindhealth.services.nlp.CrisisDetector;
import com.si.mindhealth.utils.NormalizeInput;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MessageServiceImpl implements MessageService {

    private final UserService userService;
    private final MessageRepository messageRepository;
    private final GeminiService geminiService;
    private final MoodEntryService moodEntryService;
    private final FeedbackService feedbackService;
    private final String PROMPT = "B·∫°n t√™n l√† Lucy, l√† tr·ª£ l√Ω c·ªßa m·ªôt ·ª©ng d·ª•ng qu·∫£n l√Ω nh·∫≠t k√Ω t√¢m tr·∫°ng MindHealth, h√£y lu√¥n tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát, kh√¥ng tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi ngo√†i ph·∫°m vi, n·∫øu ng∆∞·ªùi d√πng c√≥ nhu c·∫ßu c·∫ßn ƒë∆∞·ª£c ch·ªâ c√°ch ghi nh·∫≠t k√Ω, h√£y ch·ªâ ng∆∞·ªùi d√πng ·∫•n v√†o d·∫•u c·ªông ·ªü thanh tabbar ph√≠a d∆∞·ªõi, ngo√†i ra c√≥ th·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng v·ªÅ c√°c ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn t√¢m tr·∫°ng, tr·∫£ l·ªùi ng·∫Øn g·ªçn 2-3 c√¢u, k√®m 1 c√¢u mang t√≠nh t√≠ch c·ª±c v√† 1 emoji ph√π h·ª£p, ƒë·ª´ng m·ªü ƒë·∫ßu b·∫±ng ch√†o, v√† ƒë√¢y l√† tin nh·∫Øn ng∆∞·ªùi d√πng g·ª≠i cho b·∫°n: ";
    private final String OPEN_PROMPT = "B·∫°n t√™n l√† Lucy, l√† tr·ª£ l√Ω c·ªßa m·ªôt ·ª©ng d·ª•ng qu·∫£n l√Ω nh·∫≠t k√Ω t√¢m tr·∫°ng MindHealth, h√£y lu√¥n tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát, h√£y m·ªü ƒë·∫ßu c√¢u chuy·ªán v·ªõi ng∆∞·ªùi d√πng , ƒë√¢y l√† c√°c ch·ªß ƒë·ªÅ g·∫ßn ƒë√¢y m√† ng∆∞·ªùi d√πng ƒëang g·∫∑p ph·∫£i: ";

    // User luu tin nhan -> chatbot phan hoi,
    // User vao muc nhan tin chatbot -> chatbot tao 1 cau mo dau

    @Override
    @Transactional
    public MessageResponseDTO create(MessageRequestDTO request, Principal principal) {
        User user = userService.getVerifiedUserByUsername(principal.getName());

        Message message = new Message();
        message.setUser(user);
        message.setContent(request.getContent());
        message.setSender(Sender.USER);

        String normed = NormalizeInput.normalizeForMatch(message.getContent());
        boolean isCrisis = CrisisDetector.hasCrisisSignal(normed);

        Message responseFromAI = this.getResponse(messageRepository.save(message), user);
        MessageResponseDTO response = new MessageResponseDTO(responseFromAI, isCrisis, true);
        return response;
    }

    @Override
    public PageResponseDTO<MessageResponseDTO> getList(Map<String, String> params, Principal principal) {
        User user = userService.getVerifiedUserByUsername(principal.getName());

        // Ki·ªÉm tra h√¥m nay c√≥ tin nh·∫Øn n√†o ch∆∞a
        Instant startOfDay = LocalDate.now(ZoneId.systemDefault()).atStartOfDay(ZoneId.systemDefault()).toInstant();
        boolean hasTodayMsg = messageRepository.existsByUserAndCreatedAtAfter(user, startOfDay);

        // N·∫øu ch∆∞a c√≥ tin nh·∫Øn h√¥m nay -> t·∫°o ph·∫£n h·ªìi m·ªü ƒë·∫ßu
        if (!hasTodayMsg) {
            try {
                MoodEntry mood = moodEntryService.getLastest(user);
                String openingPrompt = "Xin ch√†o! M√¨nh l√† Lucy ü§ó. H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?";
                if (mood != null) {
                    String userInfoPrompt = "Ng∆∞·ªùi d√πng h·ªç t√™n tr√™n h·ªá th·ªëng l√†: " + user.getFirstName() + " " + user.getLastName() + ", gi·ªõi t√≠nh l√†: " + (user.getGender() == false ? "nam" : "n·ªØ.");
                    String topics = "";
                    for (var topic : mood.getMoodResult().getTopics()) {
                        topics += topic.getTopic().getLabel();
                    }
                    openingPrompt = geminiService.generateText(userInfoPrompt + OPEN_PROMPT + topics);
                }
                Message botMessage = new Message();
                botMessage.setUser(user);
                botMessage.setSender(Sender.BOT);
                botMessage.setContent(openingPrompt);
                messageRepository.save(botMessage);
            } catch (Exception e) {

            }
        }

        int page = NumberUtils.toInt(params.get("page"), 0);
        int size = NumberUtils.toInt(params.get("size"), 10);
        size = Math.min(Math.max(size, 1), 100);

        String sortBy = params.getOrDefault("sort", "createdAt");
        String order = params.getOrDefault("order", "DESC");
        Sort.Direction dir = "ASC".equalsIgnoreCase(order) ? Sort.Direction.ASC : Sort.Direction.DESC;
        Pageable pageable = PageRequest.of(page, size, Sort.by(dir, sortBy));

        Page<Message> pageData = messageRepository.findByUser(user, pageable);

        return new PageResponseDTO<>(
        pageData.map(m -> {
            boolean hasFeedback = (m.getSender() == Sender.BOT)
                    && feedbackService.get(TargetType.MESSAGE, m.getId(), principal) != null;
            MessageResponseDTO dto = new MessageResponseDTO(m);
            dto.setCanFeedback(!hasFeedback);
            return dto;
        })
    );
    }

    public Message getResponse(Message userMessage, User user) {
        List<Message> latest4UserMsgs =
            messageRepository.findTop4ByUserAndSenderOrderByCreatedAtDesc(user, Sender.USER);
        latest4UserMsgs.remove(0);
        String msgs = "";
        for(var ms: latest4UserMsgs) {
            msgs = msgs + ms.getContent() + "///";
        }
        String userInfoPrompt = "Ng∆∞·ªùi d√πng h·ªç t√™n tr√™n h·ªá th·ªëng l√†: " + user.getFirstName() + " " + user.getLastName() + ", gi·ªõi t√≠nh l√†: " + (user.getGender() == false ? "nam" : "n·ªØ.");
        String altProm = ", v√† ƒë√¢y l√† 3 ƒëo·∫°n tin nh·∫Øn tr∆∞·ªõc ƒë√≥ v√† g·∫ßn nh·∫•t do ng∆∞·ªùi d√πng g·ª≠i" + msgs +"\n L∆∞u √Ω 3 tin nh·∫Øn tr√™n ch·ªâ d√πng ƒë·ªÉ tƒÉng t√≠nh ch√≠nh x√°c khi tr·∫£ l·ªùi, h√£y t·∫≠p trung tr·∫£ l·ªùi v√†o tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng g·ª≠i cho b·∫°n thay v√¨ l·ªãch s·ª≠ tin nh·∫Øn.";

        String output = geminiService.generateText(userInfoPrompt + PROMPT + userMessage.getContent() + altProm);

        Message m = new Message();
        m.setUser(user);
        m.setContent(output);
        m.setSender(Sender.BOT);

        return messageRepository.save(m);
    }

    @Override
    public FeedbackResponseDTO feedback(Long id, FeedbackRequestDTO request, Principal principal) {
        User user = userService.getVerifiedUserByUsername(principal.getName());

        if (!messageRepository.existsByIdAndUserAndSender(id, user, Sender.BOT)) {
            throw new ForbiddenException("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë√°nh gi√° tin nh·∫Øn n√†y!");
        }
        if (feedbackService.exists(TargetType.MESSAGE, id, principal)) {
            throw new ForbiddenException("B·∫°n ƒë√£ ƒë√°nh gi√° tin nh·∫Øn n√†y r·ªìi!");
        }

        return this.feedbackService.create(TargetType.MESSAGE, id, request, principal);
    }

}
